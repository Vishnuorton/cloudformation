#create ec2 instances public and private subnets in new vpc.
#"depends on" attribute is very important to maintain order otherwise resources created in random order so some resources need to wait for other resources to get value from them
# ex: Internet gateway attachment need internet gateway and vpc to associate so if it created before it have to be wait for them to get ID to create internet gateway attachment 

Parameters:
  InstanceType:                         #creating parameter for Instancetype and keyname so we can get type from user ( like environment variable )instead of defining directly in code
    Type: String
    Default : t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair Name



Resources:
  MyVPC:                                # creating New VPC 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - Key : Name
          Value : MyVPC
  
  IGW:                                 # creating Internet Gateway
    Type: AWS::EC2::InternetGateway
    DependsOn: MyVPC
    Properties:
      Tags:
        - Key : Name
          Value: IGW
  
  AttachIGW:                           # Attaching Internet Gateway to VPC
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: IGW
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId : !Ref MyVPC

  EIP:                                  # Creating Elastic IP
    Type: AWS::EC2::EIP
    DependsOn: MyVPC
    Properties:
      Domain: vpc 

        
  MyNAT:                                # Creating Nat and associate Elastic IP
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
       AllocationId: !GetAtt EIP.AllocationId
       SubnetId: !Ref PublicSubnet
       Tags:
        - Key : Name
          Value: MyNAT


  PublicSubnet:                          # Creating PublicSubnet
    Type : AWS::EC2::Subnet
    DependsOn: MyVPC
    Properties :
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.1.0/24 
      VpcId: !Ref MyVPC
      Tags:
        - Key : Name
          Value : Public

  PrivateSubnet:                         # Creating Private Subnet
    Type : AWS::EC2::Subnet
    DependsOn: MyVPC
    Properties :
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.2.0/24 
      VpcId: !Ref MyVPC
      Tags:
        - Key : Name
          Value : Private

  PublicRouteTable:                       # Creating Public RouteTable  
    Type: AWS::EC2::RouteTable
    DependsOn: MyVPC
    Properties: 
      Tags: 
        - Key : Name
          Value : Public
      VpcId: !Ref MyVPC

  PrivateRouteTable:                      # Creating Private RouteTable  
    Type: AWS::EC2::RouteTable
    DependsOn: MyVPC
    Properties: 
      Tags: 
        - Key : Name
          Value : Private
      VpcId: !Ref MyVPC

  PublicRoute:                            # Creating Route for Internet gateway and associate with Public RouteTable
    Type: AWS::EC2::Route
    DependsOn: PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  
  PrivateRoute:                           # Creating Route for NAT gateway and associate with Private RouteTable
    Type: AWS::EC2::Route
    DependsOn: PrivateRouteTable
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNAT

  PublicSubnetAssociaton:                 # Associate public subnet to public route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRoute
    Properties:
      SubnetId : !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetAssociaton:                # Associate private subnet to private route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRoute
    Properties:
      SubnetId : !Ref PrivateSubnet 
      RouteTableId: !Ref PrivateRouteTable

  # creating EC2 Instances with VPC

  Webserver:
    Type: AWS::EC2::Instance
    DependsOn: WebserverSG
    Properties:
       AvailabilityZone: ap-south-1a
       ImageId: ami-067c21fb1979f0b27                 
       InstanceType: !Ref InstanceType
       NetworkInterfaces: 
         - AssociatePublicIpAddress: "true"             # autoassign public ip.ref documentation ec2::instances and serach "automatically assign public ip"
           DeviceIndex: "0"
           SubnetId: !Ref PublicSubnet
           GroupSet: 
            - Ref: "WebserverSG"                        # if you specify network interface we cant specify securitygroupids /securitygroup and subnet id outside we need to specify inside network interface.otherwise get error.
       KeyName : !Ref KeyName     
       Tags: 
        - Key: Name                       .
          Value: webserver

  Appserver:
    Type: AWS::EC2::Instance
    DependsOn: AppserverSG
    Properties:
       AvailabilityZone: ap-south-1b
       ImageId: ami-067c21fb1979f0b27
       SecurityGroupIds :                                 # if not using default VPC then need to use "securitygroupids"  instead of securitygroup.REF documentation
         - !GetAtt  AppserverSG.GroupId
       InstanceType: !Ref InstanceType
       KeyName : !Ref KeyName
       SubnetId: !Ref PrivateSubnet
       Tags: 
        - Key: Name                       .
          Value: Appserver
  
  WebserverSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyVPC
    Properties:
      GroupDescription: security group for webserver
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  AppserverSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyVPC
    Properties:
      GroupDescription: security group for Appserver
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22 
          SourceSecurityGroupId: !GetAtt  WebserverSG.GroupId
  
